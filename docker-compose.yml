version: '3.6'
volumes:
  exec_data:
  instance:
  experiments:
services:
  # database for nisq-analyzer, qc-atlas and pattern-atlas
  # each container has it's own database, generated by the db image
  db:
    build:
      context: ./db
    image: quantil-db
    environment:
      # specifies user:pw for each container
      POSTGRES_USERS: 'planqk:planqk|nisq:nisq|patternatlas:patternatlas|qprov:qprov|qhana:qhana'
      # specifies db name for each container
      POSTGRES_DATABASES: 'planqk:planqk|nisq:nisq|patternatlas:patternatlas|qprov:qprov|qhana:qhana'
      ATLAS_DB: planqk
      NISQ_DB: nisq
      PATTERNATLAS_DB: patternatlas
      QPROV_DB: qprov
    #volumes:
      # use this volume to save the postgres data
      # - ./postgres-data:/var/lib/postgresql/data
    ports:
      - '5060:5060'
    networks:
      - default
  qc-atlas-ui:
    image: planqk/qc-atlas-ui:latest
    depends_on:
      - config-server
    environment:
      # because the requests are performed from the browser and not
      # from the container itself we have to specify localhost here
      # and **not** the container name
      QC_ATLAS_HOST_NAME: localhost
      QC_ATLAS_PORT: 6626
      PATTERN_ATLAS_HOST_NAME: localhost
      PATTERN_ATLAS_PORT: 1977
      PATTERN_ATLAS_UI_HOST_NAME: localhost
      PATTERN_ATLAS_UI_PORT: 1978
      NISQ_ANALYZER_HOST_NAME: localhost
      NISQ_ANALYZER_PORT: 5010
      QPROV_HOST_NAME: localhost
      QPROV_PORT: 5020
      LATEX_RENDERER_HOST_NAME: localhost
      LATEX_RENDERER_PORT: 5030
      LIBRARY_HOST_NAME: localhost
      LIBRARY_PORT: 2903

    ports:
      - '80:80'
    volumes:
      - ./config:/opt/init-config.d
    networks:
      - default
  gateway:
    image: planqk/gateway:latest
    environment:
      NISQ_ANALYZER_URI: http://nisq-analyzer:5010
    ports:
      - '6473:6473'
    networks:
      - default
  qc-atlas:
    image: planqk/atlas:latest
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5060
      POSTGRES_USER: planqk
      POSTGRES_PASSWORD: planqk
      POSTGRES_DB: planqk
      WINERY_PROTOCOL: http
      WINERY_HOSTNAME: winery
      WINERY_PORT: 8080
      UPLOAD_FILE_SIZE: 150MB
    ports:
      - "6626:6626"
    networks:
      - default
  library:
    image: planqk/planqk-library:latest
    ports:
      - "2903:2903"
    networks:
      - default
  winery:
    image: opentosca/winery:latest
    profiles: ["all", "winery"]
    environment:
      WINERY_HOSTNAME: ${PUBLIC_HOSTNAME}
      WORKFLOWMODELER_HOSTNAME: ${PUBLIC_HOSTNAME}
      TOPOLOGYMODELER_HOSTNAME: ${PUBLIC_HOSTNAME}
      CONTAINER_HOSTNAME: ${PUBLIC_HOSTNAME}
    ports:
      - '8080:8080'
    networks:
      - default
  pattern-atlas-api:
    image: patternatlas/pattern-atlas-api:latest
    profiles: ["all", "patternAtlas"]
    environment:
      JDBC_DATABASE_URL: db
      JDBC_DATABASE_NAME: patternatlas
      JDBC_DATABASE_USERNAME: patternatlas
      JDBC_DATABASE_PASSWORD: patternatlas
      JDBC_DATABASE_PORT: 5060
      API_PORT: 1977
    ports:
      - '1977:1977'
    networks:
      - default
  pattern-atlas-ui:
    image: patternatlas/pattern-atlas-ui:latest
    profiles: [ "all", "patternAtlas" ]
    depends_on:
      - config-server
    environment:
      # because the requests are performed from the browser and not
      # from the container itself we have to specify localhost here
      # and **not** the container name
      PATTERN_ATLAS_API_HOST_NAME: localhost
      PATTERN_ATLAS_API_PORT: 1977
      LATEX_RENDERER_HOST_NAME: localhost
      LATEX_RENDERER_PORT: 5030
    ports:
      - "1978:80"
  nisq-analyzer:
    image: planqk/nisq-analyzer:latest
    profiles: ["all", "nisqAnalyzer", "nisqAnalyzerCompilerComparison"]
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5060
      POSTGRES_USER: nisq
      POSTGRES_PASSWORD: nisq
      POSTGRES_DB: nisq

      # activate correct application properties
      SPRING_PROFILES_ACTIVE: docker

      # Configure QPROV connection
      QPROV_HOSTNAME: qprov
      QPROV_PORT: 5020
      TRANSLATOR_HOSTNAME: quantum-transpiler
      TRANSLATOR_PORT: 5012
      # Configuration of the SDK Connector Services
      QISKIT_HOSTNAME: qiskit-service
      QISKIT_PORT: 5013
      FOREST_HOSTNAME: forest-service
      FOREST_PORT: 5014
      PYTKET_HOSTNAME: pytket-service
      PYTKET_PORT: 5015
      # Configure Prioritization Service connection
      PRIORITIZATION_HOSTNAME: qhana-plugin-runner
      PRIORITIZATION_PORT: 8080
    ports:
      - '5010:5010'
    networks:
      - default
  # used by qc-atlas-ui to render latex
  latex-renderer:
    image: planqk/latex-renderer:latest
    ports:
      - "5030:5030"

  quantum-transpiler:
    image: planqk/quantum-transpiler-backend:latest
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    ports:
     - '5012:5012'
    networks:
     - default

  quantum-transpiler-frontend:
    image: planqk/quantum-transpiler-frontend:latest
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    ports:
     - '5011:80'
    networks:
     - default

  # used by nisq analyzer for execution and transpilation
  qiskit-service:
    image: planqk/qiskit-service:latest
    profiles: ["all", "nisqAnalyzer", "nisqAnalyzerCompilerComparison", "qprov"]
    command: sh /app/startup.sh
    ports:
      - "5013:5013"
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    networks:
      - default

  qiskit-rq-worker:
    image: planqk/qiskit-service:latest
    profiles: ["all", "nisqAnalyzer", "nisqAnalyzerCompilerComparison", "qprov"]
    command: rq worker --url redis://redis:5040 qiskit-service_execute
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    deploy:
      replicas: 1

  forest-service:
    image: planqk/forest-service:latest
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    command: sh /app/startup.sh
    ports:
      - "5014:5014"
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
      - QVM_HOSTNAME=rigetti-qvm
      - QVM_PORT=5016
      - QUILC_HOSTNAME=rigetti-quilc
      - QUILC_PORT=5017
    volumes:
      - exec_data:/data
    networks:
      - default

  forest-rq-worker:
    image: planqk/forest-service:latest
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    command: rq worker --url redis://redis:5040 forest-service_execute
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
      - QVM_HOSTNAME=rigetti-qvm
      - QVM_PORT=5016
      - QUILC_HOSTNAME=rigetti-quilc
      - QUILC_PORT=5017
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    networks:
      - default

  pytket-service:
    image: planqk/pytket-service:latest
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    command: sh /app/startup.sh
    ports:
      - "5015:5015"
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
      - QVM_HOSTNAME=rigetti-qvm
      - QVM_PORT=5016
    volumes:
      - exec_data:/data
    networks:
      - default

  pytket-rq-worker:
    image: planqk/pytket-service:latest
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    command: rq worker --url redis://redis:5040 pytket-service_execute
    environment:
      - REDIS_URL=redis://redis:5040
      - DATABASE_URL=sqlite:////data/app.db
      - QVM_HOSTNAME=rigetti-qvm
      - QVM_PORT=5016
    volumes:
      - exec_data:/data
    depends_on:
      - redis
    networks:
      - default

  rigetti-qvm:
    image: rigetti/qvm
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    ports:
      - "5016:5016"
    command: -S -p 5016
    networks:
      - default

  rigetti-quilc:
    image: rigetti/quilc
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    ports:
      - "5017:5017"
    command: -S -p 5017
    networks:
      - default
  # redis server for qiskit service
  redis:
    image: redis:6.2.2
    profiles: ["all", "nisqAnalyzer", "nisqAnalyzerCompilerComparison", "qprov"]
    ports:
      - "5040:5040"
    command: --port 5040
    networks:
      - default
  qprov:
    image: planqk/qprov:latest
    profiles: ["all", "nisqAnalyzer", "nisqAnalyzerCompilerComparison", "qprov"]
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5060
      POSTGRES_USER: qprov
      POSTGRES_PASSWORD: qprov
      POSTGRES_DB: qprov
    ports:
      - "5020:5020"
    networks:
      - default
  qprov-collector-ibm:
    image: planqk/qprov-collector:latest
    profiles: ["all", "nisqAnalyzer", "nisqAnalyzerCompilerComparison", "qprov"]
    environment:
      POSTGRES_HOSTNAME: db
      POSTGRES_PORT: 5060
      POSTGRES_USER: qprov
      POSTGRES_PASSWORD: qprov
      POSTGRES_DB: qprov
      QPROV_IBMQ_TOKEN: ''
      QPROV_IBMQ_EXECUTE_CIRCUITS: 'false'
      QPROV_IBMQ_AUTO_COLLECT: 'true'
      QPROV_IBMQ_AUTO_COLLECT_INTERVAL: 60
      QPROV_IBMQ_AUTO_COLLECT_INTERVAL_CIRCUITS: 180
      QISKIT_SERVICE_HOSTNAME: qiskit-service
      QISKIT_SERVICE_PORT: 5013
    ports:
      - "5021:5021"
    networks:
      - default
  config-server:
    image: quay.io/coreos/etcd:latest
    environment:
      ETCD_NAME: config-node1
      ETCD_CORS: "*"
      ETCD_ADVERTISE_CLIENT_URLS: "http://config-server:2379"
      ETCD_LISTEN_CLIENT_URLS: "http://0.0.0.0:2379"
      ETCDCTL_API: 3
    ports:
      - "2379:2379"
    networks:
      - default

  # QHana containers
  qhana-ui:
    image: ghcr.io/ust-quantil/qhana-ui:main
    profiles: ["all", "QHana"]
    ports:
      - "4200:8080"
    networks:
      - default
  qhana-plugin-runner:
    image: ghcr.io/ust-quantil/qhana-plugin-runner:main
    profiles: ["all", "QHana"]
    depends_on:
      - qhana-redis
      - db
    ports:
      - "5006:8080"
    volumes:
      - instance:/app/instance
    environment:
      CONCURRENCY: 2
      BROKER_URL: redis://qhana-redis:6379
      RESULT_BACKEND: redis://qhana-redis:6379
      SQLALCHEMY_DATABASE_URI: "postgresql+psycopg2://qhana:qhana@db:5060/qhana"
      GIT_PLUGINS: "git+https://github.com/UST-QuAntiL/qhana-plugin-runner.git@main#subdirectory=/plugins"
      # URL_MAP: '{"(https?://)(localhost|host.docker.internal):9090": "\\1backend:9090"}'
      # NISQ_ANALYZER_UI_URL: http://localhost:4201
    networks:
      - default
  qhana-worker:
    image: ghcr.io/ust-quantil/qhana-plugin-runner:main
    profiles: ["all", "QHana"]
    depends_on:
      - qhana-plugin-runner
    volumes:
      - instance:/app/instance
    environment:
      CONTAINER_MODE: worker
      CONCURRENCY: 2
      BROKER_URL: redis://qhana-redis:6379
      RESULT_BACKEND: redis://qhana-redis:6379
      SQLALCHEMY_DATABASE_URI: "postgresql+psycopg2://qhana:qhana@db:5060/qhana"
      GIT_PLUGINS: "git+https://github.com/UST-QuAntiL/qhana-plugin-runner.git@main#subdirectory=/plugins"
      # URL_MAP: '{"(https?://)(localhost|host.docker.internal):9090": "\\1backend:9090"}'
    networks:
      - default
  qhana-backend:
    image: ghcr.io/ust-quantil/qhana-backend:main
    profiles: ["all", "QHana"]
    volumes:
      - experiments:/app/data
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      QHANA_URL_MAPPING: '{"(?<=^|https?://)(localhost|host.docker.internal):5006": "qhana-plugin-runner:8080", "(?<=^|https?://)localhost(:[0-9]+)?": "host.docker.internal$$1"}'
      QHANA_HOST: http://localhost:9090
      QHANA_PLUGIN_RUNNERS: '["http://localhost:5006"]'
    ports:
      - 9090:9090
    networks:
      - default
  qhana-redis:
    image: "redis:latest"
    profiles: ["all", "QHana"]
    ports:
      - "6379:6379"
    networks:
      - default
  muse-db:
    build: ../qhana-docker-dev/qhana-plugin-runner/plugins/costume_loader_pkg/db_container
    image: "muse-db"
    profiles: ["all", "QHana"]
    ports:
      - "3306:3306"
    networks:
      - default

  # Prio Service Containers
  qhana-plugin-runner-prio:
    platform: linux/amd64
    image: ghcr.io/ust-quantil/qhana-plugin-runner:main
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    depends_on:
      - redis
      - db
    ports:
      - "5005:8080"
    volumes:
      - instance:/app/instance
    environment:
      CONCURRENCY: 2
      BROKER_URL: redis://redis:5040
      RESULT_BACKEND: redis://redis:5040
      SQLALCHEMY_DATABASE_URI: "postgresql+psycopg2://qhana:qhana@db:5060/qhana"
      GIT_PLUGINS: "git+https://github.com/UST-QuAntiL/nisq-analyzer-prio-service.git@master#subdirectory=/plugins"
    networks:
      - default
  qhana-worker-prio:
    platform: linux/amd64
    image: ghcr.io/ust-quantil/qhana-plugin-runner:main
    profiles: ["all", "nisqAnalyzerCompilerComparison"]
    depends_on:
      - qhana-plugin-runner-prio
    volumes:
      - instance:/app/instance
    environment:
      CONTAINER_MODE: worker
      CONCURRENCY: 2
      BROKER_URL: redis://redis:5040
      RESULT_BACKEND: redis://redis:5040
      SQLALCHEMY_DATABASE_URI: "postgresql+psycopg2://qhana:qhana@db:5060/qhana"
      GIT_PLUGINS: "git+https://github.com/UST-QuAntiL/nisq-analyzer-prio-service.git@master#subdirectory=/plugins"
    networks:
      - default
networks:
  default:
    driver: bridge
